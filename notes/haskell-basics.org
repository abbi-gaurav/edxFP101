* What is FP
- FP is a style of programming in which expressions are more important than statements
- we use expressions to compose and create bigger expressions
- no mutation of a global state
- lambda calculus by alonzo church
* Types and classes
- Types: collection of related values
- Type errors
- type inference
- language can have
  - static typing: haskell
  - dynamic typing: ruby
  - no typing: javascript
- basic types
  - Int : fixed precision
  - Integer: arbitrary precision
- List : same type arbitrary length
- Tuple : different types definite length
- /polymorphic functions/
* Defining functions
- conditional expressions vs conditional statements
  - haskell has conditional expressions
  - need to have both if and else part like ternary expressions
  - java has conditional statements
- guarded equations
  - starts with an expression
- pattern matching
  - top -> botoom and left -> right
  - cannot repeat variables
  - *x:xs* must be (x:xs) because /application/ has priority over /:/
- lamdba expressions
  - are expressions that denote functions
  - makes intent more clear
#+BEGIN_SRC haskell
  -- e.g without lambda
  const :: a -> b -> a
  const x _ = x
   - with lamddas
  const :: a -> (b -> a)
  const x = \ _ -> x
#+END_SRC
- sections
  - *converts an infix operator to a curried function*
#+BEGIN_SRC haskell
  1+2 == (+) 1 2
  (1+) 2
  (+2) 1
  1 + 2
#+END_SRC
- in general if ø is a binary operator, the
- a ø b, (a ø) b and (ø b) a are possible
* List comprehensions
- helps write functions that manipulate lists
  - ~[x^2 | x <- [1..5]]~
  - /x <- [1..5]/ is called generator
  - comprehension can have multiple generators
    - ~[(x,y) | x <- [1..3], y <-[4..5]],~
    - y is the inner loop
    - x is outer loop
    - this depends upon order of generators but not the expression
  - dependent generators
    - later generators can use the variables introduced by earlier generators
    - ~[(x,y)| x <- [1..3], y <- [x..5]]~
  - guards are filters
    - ~[x | x <- [1..10], even x]~
* HOF
- common idioms  can be abstracted out
- easy to define a DSL
- algebaric properties of functions can be used to reason a about the behavior
- foldr is a homomorphism over list, i.e. structure of list is maintained
#+BEGIN_SRC haskell
  sum [1,2,3]
  foldr (+) 0 [1,2,3]
  foldr (+) 0 (1:(2:(3:[])))
  -- replace each : with + and [] with 0
  (1+(2+(3+0)))
#+END_SRC
- /is similiar to visitor pattern/
- usefulness
  - function properties can be proved using algebaric properties of foldr
  - fusion and banana split
  - advanced optimizations can be done
- functional composition
#+BEGIN_SRC haskell
  (.) :: (b ->c) -> (a -> b) -> (a -> c)
  f . g = \x -> f (g x) --f after g
#+END_SRC

* Functional Parsers
- parser : a program that analyzes a piece of text to determine its syntactic structure
* - Declaring Types and classes
- *alias*
  - ~type String = [Char]~
  - ~type Pair a = (a,a)~
  - *can be nested, but not recursive*
- *Types*
  - data Bool = True|False
    - Bool is similiar to an abstract class or trait
    - True or False are sub-types classes, they are called data constructors
    - Type and constructors must begin with upper case
* Lazy evaluation

 |-------------------+---------------------------------------------------------------+--------------------------------------|
 | *facts            | innermost reduction                                           | outermost reduction*                 |
 |-------------------+---------------------------------------------------------------+--------------------------------------|
 |                   | may not always terminate                                      | may terminate where innermost cannot |
 |-------------------+---------------------------------------------------------------+--------------------------------------|
 | if both terminate | same result                                                   | result                               |
 |-------------------+---------------------------------------------------------------+--------------------------------------|
 |                   | more efficient as comapred to outermost, less number of steps |                                      |
- sharing of expressions
  - ~square (3+4) ====> (p * p), where p --> (3+4) ====> (p * p), where p = 7~
- /Lazy evaluation = outermost reduction + sharing/
* Type constructors
- Type constructors take other types as parameters to eventually produce concrete types.
  - e.g ~Either, Maybe~ are type constructors
- This behavior is similar to that of functions, which take values as parameters to produce values.
- Types are little labels that values carry so that we can reason about the values.
** *But types have their own little labels called kinds*
  - A kind is more or less the type of a type.
#+BEGIN_SRC haskell
  ,*Tree> :k Int
  Int :: *
#+END_SRC
- What does that * mean? It indicates that the type is a concrete type.
- A concrete type is a type that doesn’t take any type parameters.
#+BEGIN_SRC haskell
  Maybe :: * -> *
#+END_SRC
- ~Maybe~ takes one concrete type and returns another concrete type
- *Type constructors are curried (just like functions), so we can partially apply them, as you can see here*
-
* compilation
- ghc
~ghc -o out/sum-file src/rwh/file-processing/SumFile.hs~
* Data.Map
- Map is strict in its keys, but nonstrict in its values.
- In other words, the spine, or structure, of the map is always kept up-to-date, but values in the map aren’t evaluated unless we force them to be.
- ~union~ is left-biased
* Parallel and concurrent programming
** ~modifyVar pattern~
- acquire a resource
- pass the resource to a compute
- *always* release the resource no matter what
- if there is an error, rethrow the error to the application
* recursion
** non-tail
** tail
- can be captured by ~foldl~
* pipes
** communicate
- ~yield~ : send output data
- ~await~ : receive input data
** components
- ~Producers~ : only yield
- ~Consumers~ : only await
- ~Pipes~     : can yield and await
- ~Effects~   : neither yield nor await
  - done connecting things when you get an Effect
* Functor
- how a single paramter function can be applied to a type class (Functor)
#+BEGIN_SRC haskell
-- composistion
fmap (f . g) == fmap f . fmap g

-- identity
fmap id == id

#+END_SRC

- ~(->) r~
  - The function type ~r ->a~ can be written as ~(->) r a~ similiar to ~2 + 3 == (+) 2 3~
  - ~(->)~ is a type constructor that takes ~r~ and ~a~
  - To make it ~functor~ we can partially apply ~(->) r~ which is ~(r ->)~
  - to make function as functor
#+BEGIN_SRC haskell
  instance Functor ((->) r) where
    fmap f g = (\x -> f (g x))
    -- fmap = (.) this is function composition

    -- fmap :: (a -> b) -> f a -> f b.
    -- fmap :: (a -> b) ((->) r a) -> ((-> r) b) == (a -> b) -> (r -> a) (r -> b)
#+END_SRC

- **lift**
  - =fmap= takes a function,lifts it so that it can be applied on a functor
* Applicative Functor
- A type class which enables us to raise a function to act on multiple Functor values
- when we have a function that takes multiple values
- are closed under composition
#+BEGIN_SRC haskell
  class (Functor f) => Applicative f where
    pure :: a -> f a
    (<*>) :: f(a->b) -> f a -> f b
#+END_SRC

- functions are applicative functors
#+BEGIN_SRC haskell
  instance Applicative ((->) r) where
    pure x = (\_ -> x)        --pure :: a -> (r -> a)
    f <*> g = \x -> f x (g x) -- let f = (+) <$> (*2) <*> (+10) ; f 3 = 19
#+END_SRC

* Monad
- a type constructor ~m~
- a chaining function ~ma -> (a -> mb) -> mb~
- a injector ~a -> ma~
- bind in a way that includes an "accumulator".
  - This contrasts with applicatives, which have no accumulator and hence no communication between arguments.
- not closed under composition

- =(->) r= is a monad
#+BEGIN_SRC haskell
  instance Monad ((->) r) where
    return x = \_ -> x           -- return :: a -> (r -> a)
    h >>= f = \w -> f (h w) w
#+END_SRC 

* Reader
- reader monad allows us to treat functions as values with a context. 
* Monad transformers
* Arrows
- compose pure and monadic functions together in a uniform simple fashion.
- abstract away the knowledge of monads from the user
- useful in parsers, streaming applications, and as an approach to functional reactive programming.
* Monoids
- folding accumulates
- monoids are the datatype for accumulation
* Mapping
#+BEGIN_SRC haskell
  map   :: (a -> b)   -> [a] -> [b]
  mapM  :: (a -> m b) -> [a] -> m [b]
  mapM_ :: (a -> m b) -> [a] -> m ()
#+END_SRC

* Foldable
- accumulates the input structure into a single Monoid value, but that single value might be a composite structure.
#+BEGIN_SRC haskell
  M.foldM  :: (Monad m, Foldable t) => (b -> a -> m b) -> b -> t a -> m b
  F.foldrM :: (Monad m, Foldable t) => (a -> b -> m b) -> b -> t a -> m b
  F.foldlM :: (Monad m, Foldable t) => (b -> a -> m b) -> b -> t a -> m b

#+END_SRC
* Traversable
#+begin_src haskell
  class (Functor f, Foldable t) => Traversable (t :: * -> *) where
    --Applicative FORM
    traverse  :: Applicative f  => (a -> f b) -> t a -> f (t b)
    sequenceA :: Applicative f => t (f a) -> f (t a)

    mapM     :: Monad m => (a -> m b) -> t a -> m (t b)
    sequence :: Monad m => t (m a) -> m (t a)
#+end_src
* Lens
- deliver function to a part of a structure and retunr the structure
#+begin_src haskell
  fmapRoot :: (a -> a) -> Tree a -> Tree a
  fmapRootIO :: (a -> IO a) -> Tree a -> IO (Tree a)
  fmapM :: (a -> m a) -> Tree a -> m (Tree a)
  -- Laarhoven Lens of type
  type Lens' s a = Functor f' => (a -> f' a) -> s -> f' s
#+end_src
